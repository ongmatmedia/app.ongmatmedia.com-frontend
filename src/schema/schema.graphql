# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BuffViewersLivestream {
  user_id: String!
  id: ID!
  uid: String!
  name: String!
  note: String!
  amount: Int!
  created_time: Long!
}

type BuffViewersLivestreamConnection {
  edges: [BuffViewersLivestreamEdge!]!
  pageInfo: PageInfo!
}

type BuffViewersLivestreamEdge {
  node: BuffViewersLivestream!
}

input BuffViewersLivestreamInput {
  id: ID!
  uid: String!
  name: String!
  note: String!
  amount: Int!
}

input BuffViewersLivestreamQueryFilters {
  id: TableStringFilterInput!
  amount: TableIntFilterInput!
  created_time: TableIntFilterInput!
}

type BuffViewersLivestreamTaskCUDResponse {
  buff: BuffViewersLivestreamEdge!
  me: User!
  payment_history: PaymentHistoryEdge
}

type FacebookAccount {
  user_id: String!
  id: ID!
  name: String!
  cookie: String!
  access_token: String!
  live: Boolean!
  created_at: Long!
  updated_at: Long!
}

type FacebookAccountConnection {
  edges: [FacebookAccountEdge!]!
  pageInfo: PageInfo!
}

type FacebookAccountEdge {
  cursor: String
  node: FacebookAccount!
}

input FacebookAccountInput {
  id: String!
  name: String!
  cookie: String!
  access_token: String!
}

input FacebookAccountQueryFilters {
  uid: TableStringFilterInput
  name: TableStringFilterInput
  tags: TableStringFilterInput
}

type Livestream {
  user_id: String!
  id: ID!
  videos: [LivestreamVideo!]!
  name: String!
  active: Boolean!
  status: String!
  created_time: Long!
  updated_time: Long!
  title: String!
  description: String
  time: Long!
  targets: LivestreamTarget!
  errors: [String!]!
}

type LivestreamConnection {
  edges: [LivestreamEdge!]!
  pageInfo: PageInfo!
}

type LivestreamEdge {
  node: Livestream!
}

type LivestreamFacebookTarget {
  uid: String!
  name: String!
  owner: String
  type: LivestreamFacebookTargetType!
}

input LivestreamFacebookTargetInput {
  uid: String!
  name: String!
  owner: String
  type: LivestreamFacebookTargetType!
}

enum LivestreamFacebookTargetType {
  profile
  group
  page
}

input LivestreamInput {
  videos: [LivestreamVideoInput!]!
  name: String!
  time: Long!
  title: String!
  description: String!
  targets: LivestreamTargetInput!
}

type LivestreamPricing {
  p480: Int!
  p720: Int!
  p1080: Int!
}

input LivestreamPricingInput {
  p480: Int!
  p720: Int!
  p1080: Int!
}

input LivestreamQueryFilters {
  active: Boolean!
  created_time: Long!
}

type LivestreamSubscription {
  id: ID!
  user_id: String!
  quality: Int!
  concurrent_limit: Int!
  end_time: Long!
  playing: Int!
}

input LivestreamSubscriptionInput {
  quality: Int!
  concurrent_limit: Int!
}

type LivestreamSubscriptionUpdateResponse {
  livestream_subscription: LivestreamSubscription!
  me: User!
  payment_history: PaymentHistoryEdge
}

type LivestreamTarget {
  rtmps: [String!]!
  facebooks: [LivestreamFacebookTarget!]!
}

input LivestreamTargetInput {
  rtmps: [String!]!
  facebooks: [LivestreamFacebookTargetInput!]!
}

input LivestreamUpdateInput {
  id: ID!
  videos: [LivestreamVideoInput!]
  name: String
  active: Boolean
  title: String
  description: String
  time: Long
  targets: LivestreamTargetInput
}

type LivestreamVideo {
  title: String!
  is_livestream: Boolean!
  video_id: String!
  thumbnail_url: String!
  url: String!
}

input LivestreamVideoInput {
  title: String!
  is_livestream: Boolean!
  video_id: String!
  thumbnail_url: String!
  url: String!
}

scalar Long

type Mutation {
  update_livestream_subscription(days: Int!, data: LivestreamSubscriptionInput!, user_id: ID): LivestreamSubscriptionUpdateResponse!
  create_livestream(task: LivestreamInput!): LivestreamEdge!
  update_livestream(task: LivestreamUpdateInput!): Livestream!
  delete_livestream(id: ID!): Boolean!
  create_user(price_percent: Int!, email: String!, password: String!, username: String!): UserEdge!
  update_price_percent(price_percent: Int!, user_id: String!): UserEdge!
  update_pricing(price: ServicePricingInput!): Boolean!
  send_money(note: String!, amount: Int!, user_id: String!): SendmoneyResponse!
  set_user_password(password: String!, user_id: String!): Boolean!
  update_info(payment_methods: [PaymentMethodInput!]!, facebook_uid: String!): Boolean!
  create_buff_viewers_livestream_task(input: BuffViewersLivestreamInput!): BuffViewersLivestreamTaskCUDResponse!
  delete_buff_viewers_livestream_task(id: ID!): BuffViewersLivestreamTaskCUDResponse!
  add_facebook_account(input: FacebookAccountInput!): FacebookAccountEdge!
  update_facebook_account(input: FacebookAccountInput!): FacebookAccount!
  delete_facebook_account(id: ID!): Boolean!
  create_vip_viewers_livestream_task(input: VIPViewersLivestreamInput!): VipViewersLivestreamTaskCUDResponse!
  update_vip_viewers_livestream_task(input: VIPViewersLivestreamUpdateInput!): VipViewersLivestreamTaskCUDResponse!
  delete_vip_viewers_livestream_task(id: String!): VipViewersLivestreamTaskCUDResponse!
}

type PageInfo {
  next_token: String
  prev_token: String
}

type PaymentHistory {
  id: ID!
  time: Long!
  total: Int!
  sender_username: String!
  sender_id: String!
  receiver_username: String
  service: String!
  receiver_id: String
  balance_after: Long!
  note: String!
  discount: Int!
}

type PaymentHistoryConnection {
  edges: [PaymentHistoryEdge!]!
  pageInfo: PageInfo!
}

type PaymentHistoryEdge {
  node: PaymentHistory!
}

type PaymentMethod {
  name: String!
  owner: String!
  description: String!
  account: String!
  image_url: String!
}

input PaymentMethodInput {
  name: String!
  owner: String!
  description: String!
  account: String!
  image_url: String!
}

type Query {
  livestream_subscription(user_id: ID): LivestreamSubscription
  livestream_tasks(after: String, limit: Int, filters: LivestreamQueryFilters): LivestreamConnection!
  livestream_task(id: ID!): Livestream!
  me: User!
  pricing: ServicePricing!
  payment_methods: [PaymentMethod!]!
  users(after: String, limit: Int): UserConnection!
  buff_viewers_livestream_tasks(after: String, limit: Int, filters: BuffViewersLivestreamQueryFilters): BuffViewersLivestreamConnection!
  buff_viewers_livestream_task(id: ID!): BuffViewersLivestream!
  facebook_accounts(after: String, limit: Int, filter: FacebookAccountQueryFilters): FacebookAccountConnection
  facebook_account(uid: ID!): FacebookAccount!
  vip_viewers_livestream_tasks(after: String, limit: Int, filters: VIPViewersLivestreamQueryFilters): VIPViewersLivestreamConnection!
  vip_viewers_livestream_task(id: String!): VIPViewersLivestream!
  payment_histories(after: String, before_time: Long): PaymentHistoryConnection!
}

type SendmoneyResponse {
  payment_history: PaymentHistoryEdge!
  me: User!
  user: UserEdge!
}

type ServicePricing {
  buff_viewers_livestream: Int!
  vip_viewers_livestream: Int!
  livestream: LivestreamPricing!
}

input ServicePricingInput {
  buff_viewers_livestream: Int!
  vip_viewers_livestream: Int!
  livestream: LivestreamPricingInput!
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: Int
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: String
}

type User {
  username: String!
  email: String!
  facebook_uid: String!
  id: ID!
  balance: Long!
  price_percent: Int!
  payment_methods: [PaymentMethod!]
  creator_id: String!
  created_at: Long!
  updated_at: Long!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

type VIPViewersLivestream {
  id: ID!
  active: Boolean!
  amount: Int!
  note: String!
  name: String!
  created_time: Long!
  updated_time: Long!
  end_time: Long!
  groups: [VipViewersLivestreamGroup!]!
}

type VIPViewersLivestreamConnection {
  edges: [VIPViewersLivestreamEdge!]!
  pageInfo: PageInfo!
}

type VIPViewersLivestreamEdge {
  node: VIPViewersLivestream!
}

type VipViewersLivestreamGroup {
  id: ID!
  image: String!
  name: String!
}

input VipViewersLivestreamGroupInput {
  id: ID!
  image: String!
  name: String!
}

input VIPViewersLivestreamInput {
  id: String!
  active: Boolean!
  note: String!
  amount: Int!
  name: String!
  days: Int!
  groups: [VipViewersLivestreamGroupInput!]!
}

input VIPViewersLivestreamQueryFilters {
  amount: TableIntFilterInput!
  created_time: TableIntFilterInput!
  end_time: TableIntFilterInput!
}

type VipViewersLivestreamTaskCUDResponse {
  vip: VIPViewersLivestreamEdge!
  me: User!
  payment_history: PaymentHistoryEdge
}

input VIPViewersLivestreamUpdateInput {
  id: String!
  active: Boolean
  note: String
  amount: Int
  name: String
  days: Int
  groups: [VipViewersLivestreamGroupInput!]
}
